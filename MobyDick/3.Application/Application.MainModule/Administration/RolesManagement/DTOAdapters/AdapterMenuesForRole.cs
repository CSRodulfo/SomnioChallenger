//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.1 (entitiestodtos.codeplex.com).
//     Timestamp: 2013/07/04 - 10:51:23
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using Infrastructure.Data;
using Domain.Entities;

namespace Application.MainModule.Administration.RolesManagement
{

    /// <summary>
    /// Assembler for <see cref="Menu"/> and <see cref="DTOMenu"/>.
    /// </summary>
    public static partial class AdapterMenuesForRole
    {
        /// <summary>
        /// Converts this instance of <see cref="DTOMenu"/> to an instance of <see cref="Menu"/>.
        /// </summary>
        /// <param name="dto"><see cref="DTOMenu"/> to convert.</param>
        public static Menu ToEntityMenuesForRole(this DTOMenuesForRole dto)
        {
            if (dto == null) return null;

            var entity = new Menu();

            entity.IDMenu = dto.IDMenu;
            entity.Name = dto.Name;
            entity.Description = dto.Description;
            entity.SubMenues = ToEntitiesMenuesForRole(dto.SubMenues);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Menu"/> to an instance of <see cref="DTOMenu"/>.
        /// </summary>
        /// <param name="entity"><see cref="Menu"/> to convert.</param>
        public static DTOMenuesForRole ToDTOMenuesForRole(this Menu entity)
        {
            if (entity == null) return null;

            var dto = new DTOMenuesForRole();

            dto.IDMenu = entity.IDMenu;
            dto.Name = entity.Name;
            dto.Description = entity.Description;
            if (entity.SubMenues.Count != 0)
                dto.SubMenues = ToDTOsMenuesForRole(entity.SubMenues);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="DTOMenu"/> to an instance of <see cref="Menu"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Menu> ToEntitiesMenuesForRole(this IEnumerable<DTOMenuesForRole> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntityMenuesForRole()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Menu"/> to an instance of <see cref="DTOMenu"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<DTOMenuesForRole> ToDTOsMenuesForRole(this ICollection<Menu> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTOMenuesForRole()).ToList();
        }
    }
}

//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.1 (entitiestodtos.codeplex.com).
//     Timestamp: 2013/07/04 - 10:51:23
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using Infrastructure.Data;
using Domain.Entities;

namespace Application.MainModule.Administration.RolesManagement
{

    /// <summary>
    /// Assembler for <see cref="Somnio"/> and <see cref="DTOSomnioTable"/>.
    /// </summary>
    public static partial class AdapterSomnio
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="DTOSomnioTable"/> converted from <see cref="Somnio"/>.</param>
        static partial void OnDTO(this Somnio entity, DTOSomnioTable dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Somnio"/> converted from <see cref="DTOSomnioTable"/>.</param>
        static partial void OnEntity(this DTOSomnioTable dto, Somnio entity);

        /// <summary>
        /// Converts this instance of <see cref="DTOSomnioTable"/> to an instance of <see cref="Somnio"/>.
        /// </summary>
        /// <param name="dto"><see cref="DTOSomnioTable"/> to convert.</param>
        public static Somnio ToEntity(this DTOSomnioTable dto)
        {
            if (dto == null) return null;

            var entity = new Somnio();

            entity.Id = dto.Id;
            entity.Quantity = dto.Quantity;
            entity.TotalCost= dto.TotalCost;
            entity.Date = dto.Date;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Somnio"/> to an instance of <see cref="DTOSomnioTable"/>.
        /// </summary>
        /// <param name="entity"><see cref="Somnio"/> to convert.</param>
        public static DTOSomnioTable ToDTOSomnioTable(this Somnio entity)
        {
            if (entity == null) return null;

            var dto = new DTOSomnioTable();

            dto.Id = entity.Id;
            dto.Quantity = entity.Quantity;
            dto.TotalCost = entity.TotalCost;
            dto.Date = entity.Date;
  
            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="DTOSomnioTable"/> to an instance of <see cref="Somnio"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Somnio> ToEntities(this IEnumerable<DTOSomnioTable> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Somnio"/> to an instance of <see cref="DTOSomnioTable"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<DTOSomnioTable> ToDTOs(this IEnumerable<Somnio> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTOSomnioTable()).ToList();
        }

    }
}
